<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="classcom_1_1leapmotion_1_1leap_1_1_controller" kind="class" prot="public">
    <compoundname>com::leapmotion::leap::Controller</compoundname>
    <basecompoundref prot="public" virt="non-virtual">com.leapmotion.leap.Interface</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1aa1af06cd220f36177fde378bd0bd7ab8" prot="private" static="no" mutable="no">
        <type>long</type>
        <definition>long com.leapmotion.leap.Controller.swigCPtr</definition>
        <argsstring></argsstring>
        <name>swigCPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="54" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1ad30d1294f92f61ae576a35e21ef51aa0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>com.leapmotion.leap.Controller.Controller</definition>
        <argsstring>(long cPtr, boolean cMemoryOwn)</argsstring>
        <name>Controller</name>
        <param>
          <type>long</type>
          <declname>cPtr</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>cMemoryOwn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="56" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1a4b77531c68a947c4ac7e99d20706b482" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void com.leapmotion.leap.Controller.finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="65" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="65" bodyend="67"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1a6510fbbf87490b33127cf9356a4d80ba" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>static long com.leapmotion.leap.Controller.getCPtr</definition>
        <argsstring>(Controller obj)</argsstring>
        <name>getCPtr</name>
        <param>
          <type><ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="61" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="61" bodyend="63"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1ad19466e5c1fd3c1e9ea894a33d643695" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boolean</type>
        <definition>boolean com.leapmotion.leap.Controller.addListener</definition>
        <argsstring>(Listener listener)</argsstring>
        <name>addListener</name>
        <param>
          <type><ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener" kindref="compound">Listener</ref></type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Adds a listener to this <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref> dispatches Leap events to each associated listener. The order in which listener callback functions are invoked is arbitrary. If you pass a listener to the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref>&apos;s constructor function, it is automatically added to the list and can be removed with the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a33ae2103e110125fdb2eb6054b33ef7b" kindref="member">Controller::removeListener()</ref> function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>A subclass of Leap::Listener implementing the callback functions for the Leap events you want to handle in your application. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether or not the listener was successfully added to the list of listeners. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="154" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1a566d7f4f612e29d1ec443ffcc4fdaa0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcom_1_1leapmotion_1_1leap_1_1_screen_list" kindref="compound">ScreenList</ref></type>
        <definition>ScreenList com.leapmotion.leap.Controller.calibratedScreens</definition>
        <argsstring>()</argsstring>
        <name>calibratedScreens</name>
        <briefdescription>
<para>The list of screens whose positions have been identified by using the Leap application <ref refid="classcom_1_1leapmotion_1_1leap_1_1_screen" kindref="compound">Screen</ref> Locator. </para>        </briefdescription>
        <detaileddescription>
<para>The list always contains at least one entry representing the default screen. If the user has not registered the location of this default screen, then the coordinates, directions, and other values reported by the functions in its <ref refid="classcom_1_1leapmotion_1_1leap_1_1_screen" kindref="compound">Screen</ref> object will not be accurate. Other monitor screens only appear in the list if their positions have been registered using the Leap <ref refid="classcom_1_1leapmotion_1_1leap_1_1_screen" kindref="compound">Screen</ref> Locator.</para><para>A <ref refid="classcom_1_1leapmotion_1_1leap_1_1_screen" kindref="compound">Screen</ref> object represents the position and orientation of a display monitor screen within the Leap coordinate system. For example, if the screen location is known, you can get Leap coordinates for the bottom-left corner of the screen. Registering the screen location also allows the Leap to calculate the point on the screen at which a finger or tool is pointing.</para><para>A user can run the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_screen" kindref="compound">Screen</ref> Locator tool from the Leap application Settings window. Avoid assuming that a screen location is known or that an existing position is still correct. The registered position is only valid as long as the relative position of the Leap device and the monitor screen remain constant.</para><para><programlisting></programlisting></para><para><simplesect kind="return"><para><ref refid="classcom_1_1leapmotion_1_1leap_1_1_screen_list" kindref="compound">ScreenList</ref> A list containing the screens whose positions have been registered by the user using the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_screen" kindref="compound">Screen</ref> Locator tool. The list always contains at least one entry representing the default monitor. If the user has not run the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_screen" kindref="compound">Screen</ref> Locator or has moved the Leap device or screen since running it, the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_screen" kindref="compound">Screen</ref> object for this entry only contains default values. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="251" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="251" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1a7f1782f297d729edbda9df347e5ad220" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcom_1_1leapmotion_1_1leap_1_1_config" kindref="compound">Config</ref></type>
        <definition>Config com.leapmotion.leap.Controller.config</definition>
        <argsstring>()</argsstring>
        <name>config</name>
        <briefdescription>
<para>Returns a <ref refid="classcom_1_1leapmotion_1_1leap_1_1_config" kindref="compound">Config</ref> object, which you can use to query the Leap system for configuration information. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="213" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1a615807b6ff5b7d7b4323096988fba8bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>com.leapmotion.leap.Controller.Controller</definition>
        <argsstring>()</argsstring>
        <name>Controller</name>
        <briefdescription>
<para>Constructs a <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>When creating a <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref> object, you may optionally pass in a reference to an instance of a subclass of Leap::Listener. Alternatively, you may add a listener using the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1ad19466e5c1fd3c1e9ea894a33d643695" kindref="member">Controller::addListener()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="88" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1aba118706333695d21b853c0ded607b2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>com.leapmotion.leap.Controller.Controller</definition>
        <argsstring>(Listener listener)</argsstring>
        <name>Controller</name>
        <param>
          <type><ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener" kindref="compound">Listener</ref></type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>When creating a <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref> object, you may optionally pass in a reference to an instance of a subclass of Leap::Listener. Alternatively, you may add a listener using the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1ad19466e5c1fd3c1e9ea894a33d643695" kindref="member">Controller::addListener()</ref> function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of Leap::Listener implementing the callback functions for the Leap events you want to handle in your application. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="103" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1a37c93891be49b06aa9af80622c41b681" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>synchronized void</type>
        <definition>synchronized void com.leapmotion.leap.Controller.delete</definition>
        <argsstring>()</argsstring>
        <name>delete</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="69" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="69" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1ad49179bb7ada9753e50d63d640b7e2b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void com.leapmotion.leap.Controller.enableGesture</definition>
        <argsstring>(Gesture.Type type, boolean enable)</argsstring>
        <name>enableGesture</name>
        <param>
          <type>Gesture.Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enables or disables reporting of a specified gesture type. </para>        </briefdescription>
        <detaileddescription>
<para>By default, all gesture types are disabled. When disabled, gestures of the disabled type are never reported and will not appear in the frame gesture list.</para><para>As a performance optimization, only enable recognition for the types of movements that you use in your application.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of gesture to enable or disable. Must be a member of the <ref refid="enumcom_1_1leapmotion_1_1leap_1_1_gesture_1_1_type" kindref="compound">Gesture::Type</ref> enumeration. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True, to enable the specified gesture type; False, to disable. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1ad445c8142735bdaef98685d1391865c3" kindref="member">Controller::isGestureEnabled()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="272" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="272" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1a4efb4a5c95d733c4949746e569eb38fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void com.leapmotion.leap.Controller.enableGesture</definition>
        <argsstring>(Gesture.Type type)</argsstring>
        <name>enableGesture</name>
        <param>
          <type>Gesture.Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Enables or disables reporting of a specified gesture type. </para>        </briefdescription>
        <detaileddescription>
<para>By default, all gesture types are disabled. When disabled, gestures of the disabled type are never reported and will not appear in the frame gesture list.</para><para>As a performance optimization, only enable recognition for the types of movements that you use in your application.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of gesture to enable or disable. Must be a member of the <ref refid="enumcom_1_1leapmotion_1_1leap_1_1_gesture_1_1_type" kindref="compound">Gesture::Type</ref> enumeration. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True, to enable the specified gesture type; False, to disable. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1ad445c8142735bdaef98685d1391865c3" kindref="member">Controller::isGestureEnabled()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="293" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="293" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1a2c4cbec7ffa3d187a41c136279e145df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcom_1_1leapmotion_1_1leap_1_1_frame" kindref="compound">Frame</ref></type>
        <definition>Frame com.leapmotion.leap.Controller.frame</definition>
        <argsstring>(int history)</argsstring>
        <name>frame</name>
        <param>
          <type>int</type>
          <declname>history</declname>
        </param>
        <briefdescription>
<para>Returns a frame of tracking data from the Leap. </para>        </briefdescription>
        <detaileddescription>
<para>Use the optional history parameter to specify which frame to retrieve. Call <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1af31ab95b5311721e816e8d9ece03bea4" kindref="member">frame()</ref> or frame(0) to access the most recent frame; call frame(1) to access the previous frame, and so on. If you use a history value greater than the number of stored frames, then the controller returns an invalid frame.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>history</parametername>
</parameternamelist>
<parameterdescription>
<para>The age of the frame to return, counting backwards from the most recent frame (0) into the past and up to the maximum age (59). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The specified frame; or, if no history parameter is specified, the newest frame. If a frame is not available at the specified history position, an invalid <ref refid="classcom_1_1leapmotion_1_1leap_1_1_frame" kindref="compound">Frame</ref> is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="186" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1af31ab95b5311721e816e8d9ece03bea4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcom_1_1leapmotion_1_1leap_1_1_frame" kindref="compound">Frame</ref></type>
        <definition>Frame com.leapmotion.leap.Controller.frame</definition>
        <argsstring>()</argsstring>
        <name>frame</name>
        <briefdescription>
<para>Returns a frame of tracking data from the Leap. </para>        </briefdescription>
        <detaileddescription>
<para>Use the optional history parameter to specify which frame to retrieve. Call <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1af31ab95b5311721e816e8d9ece03bea4" kindref="member">frame()</ref> or frame(0) to access the most recent frame; call frame(1) to access the previous frame, and so on. If you use a history value greater than the number of stored frames, then the controller returns an invalid frame.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>history</parametername>
</parameternamelist>
<parameterdescription>
<para>The age of the frame to return, counting backwards from the most recent frame (0) into the past and up to the maximum age (59). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The specified frame; or, if no history parameter is specified, the newest frame. If a frame is not available at the specified history position, an invalid <ref refid="classcom_1_1leapmotion_1_1leap_1_1_frame" kindref="compound">Frame</ref> is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="204" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1a2eb2f7b29f1fedaa3e7b68f9bbff9287" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boolean</type>
        <definition>boolean com.leapmotion.leap.Controller.hasFocus</definition>
        <argsstring>()</argsstring>
        <name>hasFocus</name>
        <briefdescription>
<para>Reports whether this application is the focused, foreground application. </para>        </briefdescription>
        <detaileddescription>
<para>Only the foreground application receives tracking information from the Leap Motion <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref>.</para><para><simplesect kind="return"><para>True, if application has focus; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="135" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1a80a13bc6fc939b6b40791b03bd314ed3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boolean</type>
        <definition>boolean com.leapmotion.leap.Controller.isConnected</definition>
        <argsstring>()</argsstring>
        <name>isConnected</name>
        <briefdescription>
<para>Reports whether this <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref> is connected to the Leap device. </para>        </briefdescription>
        <detaileddescription>
<para>When you first create a <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref> object, <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a80a13bc6fc939b6b40791b03bd314ed3" kindref="member">isConnected()</ref> returns false. After the controller finishes initializing and connects to the Leap, <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a80a13bc6fc939b6b40791b03bd314ed3" kindref="member">isConnected()</ref> will return true.</para><para>You can either handle the onConnect event using a <ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener" kindref="compound">Listener</ref> instance or poll the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a80a13bc6fc939b6b40791b03bd314ed3" kindref="member">isConnected()</ref> function if you need to wait for your application to be connected to the Leap before performing some other operation.</para><para><simplesect kind="return"><para>True, if connected; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="122" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1ad445c8142735bdaef98685d1391865c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boolean</type>
        <definition>boolean com.leapmotion.leap.Controller.isGestureEnabled</definition>
        <argsstring>(Gesture.Type type)</argsstring>
        <name>isGestureEnabled</name>
        <param>
          <type>Gesture.Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Reports whether the specified gesture type is enabled. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True, if the specified type is enabled; false, otherwise. </para></simplesect>
<simplesect kind="see"><para><ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1ad49179bb7ada9753e50d63d640b7e2b6" kindref="member">Controller::enableGesture()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="304" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="304" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classcom_1_1leapmotion_1_1leap_1_1_controller_1a33ae2103e110125fdb2eb6054b33ef7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boolean</type>
        <definition>boolean com.leapmotion.leap.Controller.removeListener</definition>
        <argsstring>(Listener listener)</argsstring>
        <name>removeListener</name>
        <param>
          <type><ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener" kindref="compound">Listener</ref></type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Remove a listener from the list of listeners that will receive Leap events. </para>        </briefdescription>
        <detaileddescription>
<para>A listener must be removed if its lifetime is shorter than the controller to which it is listening.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>The listener to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether or not the listener was successfully removed from the list of listeners. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="168" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="168" bodyend="170"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref> class is your main interface to the Leap Motion <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>Create an instance of this <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref> class to access frames of tracking data and configuration information. <ref refid="classcom_1_1leapmotion_1_1leap_1_1_frame" kindref="compound">Frame</ref> data can be polled at any time using the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1af31ab95b5311721e816e8d9ece03bea4" kindref="member">Controller::frame()</ref> function. Call <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1af31ab95b5311721e816e8d9ece03bea4" kindref="member">frame()</ref> or frame(0) to get the most recent frame. Set the history parameter to a positive integer to access previous frames. A controller stores up to 60 frames in its frame history.</para><para>Polling is an appropriate strategy for applications which already have an intrinsic update loop, such as a game. You can also add an instance of a subclass of Leap::Listener to the controller to handle events as they occur. The Leap dispatches events to the listener upon initialization and exiting, on connection changes, and when a new frame of tracking data is available. When these events occur, the controller object invokes the appropriate callback function defined in your subclass of <ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener" kindref="compound">Listener</ref>.</para><para>To access frames of tracking data as they become available:</para><para><orderedlist>
<listitem><para>Implement a subclass of the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener" kindref="compound">Listener</ref> class and override the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener_1afb0bdc73f5b4edf164a4b1134557f975" kindref="member">Listener::onFrame()</ref> function.</para></listitem><listitem><para>In your <ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener_1afb0bdc73f5b4edf164a4b1134557f975" kindref="member">Listener::onFrame()</ref> function, call the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1af31ab95b5311721e816e8d9ece03bea4" kindref="member">Controller::frame()</ref> function to access the newest frame of tracking data.</para></listitem><listitem><para>To start receiving frames, create a <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref> object and add an instance of the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener" kindref="compound">Listener</ref> subclass to the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1ad19466e5c1fd3c1e9ea894a33d643695" kindref="member">Controller::addListener()</ref> function.</para></listitem></orderedlist>
</para><para>When an instance of a <ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener" kindref="compound">Listener</ref> subclass is added to a <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref> object, it calls the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener_1a9350b36122e690e20078ba284701bed0" kindref="member">Listener::onInit()</ref> function when the listener is ready for use. When a connection is established between the controller and the Leap, the controller calls the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener_1a46b9ec2670695d44d4e9ddf77c8301c3" kindref="member">Listener::onConnect()</ref> function. At this point, your application will start receiving frames of data. The controller calls the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener_1afb0bdc73f5b4edf164a4b1134557f975" kindref="member">Listener::onFrame()</ref> function each time a new frame is available. If the controller loses its connection with the Leap software or device for any reason, it calls the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener_1a860bf64a24bcb4ac5bce4e8d35c48783" kindref="member">Listener::onDisconnect()</ref> function. If the listener is removed from the controller or the controller is destroyed, it calls the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener_1a78fa3b1a0850e3d8410b7200f3d813af" kindref="member">Listener::onExit()</ref> function. At that point, unless the listener is added to another controller again, it will no longer receive frames of tracking data.</para><para>The <ref refid="classcom_1_1leapmotion_1_1leap_1_1_controller" kindref="compound">Controller</ref> object is multithreaded and calls the <ref refid="classcom_1_1leapmotion_1_1leap_1_1_listener" kindref="compound">Listener</ref> functions on its own thread, not on an application thread. </para>    </detaileddescription>
    <location file="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" line="53" bodyfile="/Volumes/LEAP/docs-build/temp/java/com/leapmotion/leap/Controller.java" bodystart="53" bodyend="308"/>
    <listofallmembers>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1ad19466e5c1fd3c1e9ea894a33d643695" prot="public" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>addListener</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a566d7f4f612e29d1ec443ffcc4fdaa0b" prot="public" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>calibratedScreens</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a7f1782f297d729edbda9df347e5ad220" prot="public" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>config</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1ad30d1294f92f61ae576a35e21ef51aa0" prot="protected" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>Controller</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a615807b6ff5b7d7b4323096988fba8bf" prot="public" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>Controller</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1aba118706333695d21b853c0ded607b2b" prot="public" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>Controller</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a37c93891be49b06aa9af80622c41b681" prot="public" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>delete</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1ad49179bb7ada9753e50d63d640b7e2b6" prot="public" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>enableGesture</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a4efb4a5c95d733c4949746e569eb38fa" prot="public" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>enableGesture</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a4b77531c68a947c4ac7e99d20706b482" prot="protected" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>finalize</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a2c4cbec7ffa3d187a41c136279e145df" prot="public" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>frame</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1af31ab95b5311721e816e8d9ece03bea4" prot="public" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>frame</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a6510fbbf87490b33127cf9356a4d80ba" prot="protected" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>getCPtr</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_interface_1a7f420935413dfa0b73d522d173b89521" prot="protected" virt="non-virtual" ambiguityscope="com::leapmotion::leap::Interface."><scope>com::leapmotion::leap::Controller</scope><name>getCPtr</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a2eb2f7b29f1fedaa3e7b68f9bbff9287" prot="public" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>hasFocus</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_interface_1a2dc14921e56d16434d81b56f6ca73e91" prot="protected" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>Interface</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a80a13bc6fc939b6b40791b03bd314ed3" prot="public" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>isConnected</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1ad445c8142735bdaef98685d1391865c3" prot="public" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>isGestureEnabled</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1a33ae2103e110125fdb2eb6054b33ef7b" prot="public" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>removeListener</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_interface_1aa0a823d6318274e955270e17360d3505" prot="protected" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>swigCMemOwn</name></member>
      <member refid="classcom_1_1leapmotion_1_1leap_1_1_controller_1aa1af06cd220f36177fde378bd0bd7ab8" prot="private" virt="non-virtual"><scope>com::leapmotion::leap::Controller</scope><name>swigCPtr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
